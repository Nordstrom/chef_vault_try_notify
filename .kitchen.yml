<% proxy_vars = {} %>
<% %w(http_proxy https_proxy no_proxy).each do |envvar| %>
<%   if ENV.key?(envvar) %>
<%     proxy_vars[envvar] = ENV[envvar] %>
<%   end %>
<% end %>
---
driver:
  name: vagrant

<% if proxy_vars.size > 0 %>
driver_config:
<% %w(http_proxy https_proxy no_proxy).each do |envvar| %>
<% if ENV.key?(envvar) %>
  <%= envvar %>: '<%= ENV[envvar] %>'
<% end %>
<% end %>
<% end %>

provisioner:
  name: chef_zero
<% if proxy_vars.size > 0 %>
  client_rb:
<% %w(http_proxy https_proxy no_proxy).each do |envvar| %>
<% if ENV.key?(envvar) %>
    <%= envvar %>: '<%= ENV[envvar] %>'
<% end %>
<% end %>
<% end %>

platforms:
  - name: ubuntu-14.04

suites:
  - name: decrypt_ok
    run_list:
      - recipe[secret_waiter::decrypt_ok]
  # this suite is expected to fail (because the secrets can't be decrypted)
  # but TK doesn't have a way to assert that expectation
  - name: decrypt_failure
    run_list:
      - recipe[secret_waiter::decrypt_failure]
  - name: guard
    run_list:
      - recipe[secret_waiter::guard]
  # this suite only works if the provider is patched to catch the RuntimeError
  # thrown when databg fallback is disabled
  - name: guard_failure
    run_list:
      - recipe[secret_waiter::guard_failure]
    attributes:
      chef-vault:
        databag_fallback: false
  - name: predicate
    run_list:
      - recipe[secret_waiter::predicate]
